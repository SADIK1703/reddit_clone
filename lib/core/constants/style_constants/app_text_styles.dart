import 'package:flutter/material.dart';
import 'package:reddit_clone/core/constants/style_constants/app_colors.dart';

class AppTextStyles {
  TextStyle _defaultTextStyle = const TextStyle();

  void setDefaultTextStyle({
    bool? inherit,
    Color? color,
    Color? backgroundColor,
    double? fontSize,
    FontWeight? fontWeight,
    FontStyle? fontStyle,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    double? height,
    TextLeadingDistribution? leadingDistribution,
    Locale? locale,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    List<FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
    String? fontFamily,
    List<String>? fontFamilyFallback,
    String? package,
    TextOverflow? overflow,
  }) {
    _defaultTextStyle = _defaultTextStyle.copyWith(
      inherit: inherit,
      color: color,
      backgroundColor: backgroundColor,
      fontSize: fontSize,
      fontWeight: fontWeight,
      fontStyle: fontStyle,
      letterSpacing: letterSpacing,
      wordSpacing: wordSpacing,
      textBaseline: textBaseline,
      height: height,
      leadingDistribution: leadingDistribution,
      locale: locale,
      foreground: foreground,
      background: background,
      shadows: shadows,
      fontFeatures: fontFeatures,
      fontVariations: fontVariations,
      decoration: decoration,
      decorationColor: decorationColor,
      decorationStyle: decorationStyle,
      decorationThickness: decorationThickness,
      debugLabel: debugLabel,
      fontFamily: fontFamily,
      fontFamilyFallback: fontFamilyFallback,
      package: package,
      overflow: overflow,
    );
  }

  TextStyle head({
    bool? inherit,
    Color? color = AppColors.grey,
    Color? backgroundColor,
    double? fontSize,
    FontWeight? fontWeight = FontWeight.w700,
    FontStyle? fontStyle,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    double? height,
    TextLeadingDistribution? leadingDistribution,
    Locale? locale,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    List<FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
    String? fontFamily,
    List<String>? fontFamilyFallback,
    String? package,
    TextOverflow? overflow,
  }) {
    return TextStyle(
      inherit: inherit ?? _defaultTextStyle.inherit,
      color: color ?? _defaultTextStyle.color,
      backgroundColor: backgroundColor ?? _defaultTextStyle.backgroundColor,
      fontSize: fontSize ?? _defaultTextStyle.fontSize,
      fontWeight: fontWeight ?? _defaultTextStyle.fontWeight,
      fontStyle: fontStyle ?? _defaultTextStyle.fontStyle,
      letterSpacing: letterSpacing ?? _defaultTextStyle.letterSpacing,
      wordSpacing: wordSpacing ?? _defaultTextStyle.wordSpacing,
      textBaseline: textBaseline ?? _defaultTextStyle.textBaseline,
      height: height ?? _defaultTextStyle.height,
      leadingDistribution: leadingDistribution ?? _defaultTextStyle.leadingDistribution,
      locale: locale ?? _defaultTextStyle.locale,
      foreground: foreground ?? _defaultTextStyle.foreground,
      background: background ?? _defaultTextStyle.background,
      shadows: shadows ?? _defaultTextStyle.shadows,
      fontFeatures: fontFeatures ?? _defaultTextStyle.fontFeatures,
      fontVariations: fontVariations ?? _defaultTextStyle.fontVariations,
      decoration: decoration ?? _defaultTextStyle.decoration,
      decorationColor: decorationColor ?? _defaultTextStyle.decorationColor,
      decorationStyle: decorationStyle ?? _defaultTextStyle.decorationStyle,
      decorationThickness: decorationThickness ?? _defaultTextStyle.decorationThickness,
      debugLabel: debugLabel ?? _defaultTextStyle.debugLabel,
      fontFamily: fontFamily ?? _defaultTextStyle.fontFamily,
      fontFamilyFallback: fontFamilyFallback ?? _defaultTextStyle.fontFamilyFallback,
      package: package,
      overflow: overflow ?? _defaultTextStyle.overflow,
    );
  }

  TextStyle body({
    bool? inherit,
    Color? color = AppColors.paleGrey,
    Color? backgroundColor,
    double? fontSize = 14,
    FontWeight? fontWeight = FontWeight.w700,
    FontStyle? fontStyle,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    double? height,
    TextLeadingDistribution? leadingDistribution,
    Locale? locale,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    List<FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
    String? fontFamily,
    List<String>? fontFamilyFallback,
    String? package,
    TextOverflow? overflow,
  }) {
    return TextStyle(
      inherit: inherit ?? _defaultTextStyle.inherit,
      color: color ?? _defaultTextStyle.color,
      backgroundColor: backgroundColor ?? _defaultTextStyle.backgroundColor,
      fontSize: fontSize ?? _defaultTextStyle.fontSize,
      fontWeight: fontWeight ?? _defaultTextStyle.fontWeight,
      fontStyle: fontStyle ?? _defaultTextStyle.fontStyle,
      letterSpacing: letterSpacing ?? _defaultTextStyle.letterSpacing,
      wordSpacing: wordSpacing ?? _defaultTextStyle.wordSpacing,
      textBaseline: textBaseline ?? _defaultTextStyle.textBaseline,
      height: height ?? _defaultTextStyle.height,
      leadingDistribution: leadingDistribution ?? _defaultTextStyle.leadingDistribution,
      locale: locale ?? _defaultTextStyle.locale,
      foreground: foreground ?? _defaultTextStyle.foreground,
      background: background ?? _defaultTextStyle.background,
      shadows: shadows ?? _defaultTextStyle.shadows,
      fontFeatures: fontFeatures ?? _defaultTextStyle.fontFeatures,
      fontVariations: fontVariations ?? _defaultTextStyle.fontVariations,
      decoration: decoration ?? _defaultTextStyle.decoration,
      decorationColor: decorationColor ?? _defaultTextStyle.decorationColor,
      decorationStyle: decorationStyle ?? _defaultTextStyle.decorationStyle,
      decorationThickness: decorationThickness ?? _defaultTextStyle.decorationThickness,
      debugLabel: debugLabel ?? _defaultTextStyle.debugLabel,
      fontFamily: fontFamily ?? _defaultTextStyle.fontFamily,
      fontFamilyFallback: fontFamilyFallback ?? _defaultTextStyle.fontFamilyFallback,
      package: package,
      overflow: overflow ?? _defaultTextStyle.overflow,
    );
  }

  TextStyle text({
    bool? inherit,
    Color? color = AppColors.grey,
    Color? backgroundColor,
    double? fontSize = 10,
    FontWeight? fontWeight = FontWeight.w600,
    FontStyle? fontStyle,
    double? letterSpacing,
    double? wordSpacing,
    TextBaseline? textBaseline,
    double? height,
    TextLeadingDistribution? leadingDistribution,
    Locale? locale,
    Paint? foreground,
    Paint? background,
    List<Shadow>? shadows,
    List<FontFeature>? fontFeatures,
    List<FontVariation>? fontVariations,
    TextDecoration? decoration,
    Color? decorationColor,
    TextDecorationStyle? decorationStyle,
    double? decorationThickness,
    String? debugLabel,
    String? fontFamily,
    List<String>? fontFamilyFallback,
    String? package,
    TextOverflow? overflow,
  }) {
    return TextStyle(
      inherit: inherit ?? _defaultTextStyle.inherit,
      color: color ?? _defaultTextStyle.color,
      backgroundColor: backgroundColor ?? _defaultTextStyle.backgroundColor,
      fontSize: fontSize ?? _defaultTextStyle.fontSize,
      fontWeight: fontWeight ?? _defaultTextStyle.fontWeight,
      fontStyle: fontStyle ?? _defaultTextStyle.fontStyle,
      letterSpacing: letterSpacing ?? _defaultTextStyle.letterSpacing,
      wordSpacing: wordSpacing ?? _defaultTextStyle.wordSpacing,
      textBaseline: textBaseline ?? _defaultTextStyle.textBaseline,
      height: height ?? _defaultTextStyle.height,
      leadingDistribution: leadingDistribution ?? _defaultTextStyle.leadingDistribution,
      locale: locale ?? _defaultTextStyle.locale,
      foreground: foreground ?? _defaultTextStyle.foreground,
      background: background ?? _defaultTextStyle.background,
      shadows: shadows ?? _defaultTextStyle.shadows,
      fontFeatures: fontFeatures ?? _defaultTextStyle.fontFeatures,
      fontVariations: fontVariations ?? _defaultTextStyle.fontVariations,
      decoration: decoration ?? _defaultTextStyle.decoration,
      decorationColor: decorationColor ?? _defaultTextStyle.decorationColor,
      decorationStyle: decorationStyle ?? _defaultTextStyle.decorationStyle,
      decorationThickness: decorationThickness ?? _defaultTextStyle.decorationThickness,
      debugLabel: debugLabel ?? _defaultTextStyle.debugLabel,
      fontFamily: fontFamily ?? _defaultTextStyle.fontFamily,
      fontFamilyFallback: fontFamilyFallback ?? _defaultTextStyle.fontFamilyFallback,
      package: package,
      overflow: overflow ?? _defaultTextStyle.overflow,
    );
  }
}
